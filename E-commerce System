class Product:
    def __init__(self, name, price, stock):
        self.name = name
        self.price = price
        self.stock = stock

    def update_stock(self, quantity):
        if self.stock >= quantity:
            self.stock -= quantity
            return True
        return False

class Customer:
    def __init__(self, name):
        self.name = name
        self.cart = ShoppingCart()

    def add_to_cart(self, product, quantity):
        return self.cart.add_product(product, quantity)

    def remove_from_cart(self, product):
        return self.cart.remove_product(product)

class ShoppingCart:
    def __init__(self):
        self.items = {}

    def add_product(self, product, quantity):
        if product.update_stock(quantity):
            self.items[product] = self.items.get(product, 0) + quantity
            return True
        return False

    def remove_product(self, product):
        if product in self.items:
            product.stock += self.items[product]
            del self.items[product]
            return True
        return False

    def view_cart(self):
        if not self.items:
            print("üõí Cart is empty.")
            return
        print("\nüõçÔ∏è Your Shopping Cart:")
        for product, qty in self.items.items():
            print(f" - {product.name} x{qty} @ ${product.price} each = ${product.price * qty}")

    def apply_discount(self, percentage):
        return sum(product.price * qty * (1 - percentage / 100) for product, qty in self.items.items())

    def apply_discount_code(self, code):
        DISCOUNT_CODES = {"SAVE10": 10, "WELCOME20": 20}
        percentage = DISCOUNT_CODES.get(code.upper(), 0)
        return self.apply_discount(percentage)

class Order:
    def __init__(self, customer, discount_code=None):
        self.customer = customer
        if discount_code:
            self.total_price = customer.cart.apply_discount_code(discount_code)
        else:
            self.total_price = customer.cart.apply_discount(0)count(0)

    def process_order(self):
        self.customer.cart.items.clear()
        return f"Order processed for {self.customer.name}. Total: ${self.total_price:.2f}"

# Example usage
product1 = Product("Laptop", 1000, 5)
product2 = Product("Phone", 500, 10)

customer = Customer("Alice")
customer.add_to_cart(product1, 1)
customer.add_to_cart(product2, 2)

customer.cart.view_cart()

# Apply discount and place order
order = Order(customer, discount_code="SAVE10")
print(order.process_order())
